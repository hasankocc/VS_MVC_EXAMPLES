@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <link href="~/Content/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="~/Content/styles/kendo.rtl.min.css" rel="stylesheet" />
    <link href="~/Content/styles/kendo.default.min.css" rel="stylesheet" />
    <link href="~/Content/styles/kendo.default.mobile.min.css" rel="stylesheet" />
    <script src="~/Content/js/jquery.min.js"></script>
    <script src="~/Content/js/jszip.min.js"></script>
    <script src="~/Content/js/kendo.all.min.js"></script>

</head>
<body>
    @(Html.Kendo().Grid<KendoGridAjaxEditing.Models.ProductViewModel>()
            .Name("grid")
            .Columns(columns =>
            {
                columns.Bound(product => product.ProductID).Width(100);
                columns.Bound(product => product.ProductName);
                columns.Bound(product => product.UnitsInStock).Width(250);
                columns.Command(commands =>
                {
                    commands.Edit(); // The "edit" command will edit and update data items.
                    commands.Destroy(); // The "destroy" command removes data items.
                }).Title("Commands").Width(200);
            })
            .ToolBar(toolbar => toolbar.Create()) // The "create" command adds new data items.
            .Editable(editable => editable.Mode(GridEditMode.InLine)) // Use inline editing mode.
            .DataSource(dataSource =>
                dataSource.Ajax()
                  .Model(model =>
                  {
                      model.Id(product => product.ProductID); // Specify the property which is the unique identifier of the model.
                      model.Field(product => product.ProductID).Editable(false); // Make the ProductID property not editable.
                  })
                  .Create(create => create.Action("Products_Create", "Home")) // Action invoked when the user saves a new data item.
                  .Read(read => read.Action("Products_Read", "Home"))  // Action invoked when the grid needs data.
                  .Update(update => update.Action("Products_Update", "Home"))  // Action invoked when the user saves an updated data item.
                  .Destroy(destroy => destroy.Action("Products_Destroy", "Home")) // Action invoked when the user removes a data item.
            )
            .Pageable()
      )
</body>
</html>
